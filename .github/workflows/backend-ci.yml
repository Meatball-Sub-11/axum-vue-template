# File: .github/workflows/backend-ci.yml
#
# Name of the workflow
name: Backend CI

# Controls when the workflow will run
on:
  # Triggers the workflow on pull request events for the main branch
  pull_request:
    branches: [ main ]
    # Only run if files in the 'backend' directory have changed
    paths:
      - 'backend/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job is named "build-and-test"
  build-and-test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up the Rust toolchain
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy

      # Step 3: Cache Cargo dependencies to speed up future builds
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            backend/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}

      # Step 4: Run clippy for linting and code quality checks
      # We deny all warnings (-D warnings) but specifically allow dead_code (-A dead_code)
      # because it's expected in a template with unused placeholder code.
      - name: Run Clippy
        run: cd backend && cargo clippy -- -D warnings -A dead_code

      # Step 5: Run tests
      - name: Run tests
        run: cd backend && cargo test
